<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-lazy-init="true">
	
	<!-- 启动注解配置 -->
	<context:annotation-config />
	
	<!-- 启动并设置包扫描位置 -->
	<context:component-scan base-package="cn.wxn.demo" />
	
	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />		
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="100" />
		<property name="maxIdle" value="20" />
		<property name="maxWait" value="1000" />
	</bean>
	
	<context:property-placeholder location="jdbc.properties"/>
	
	<!-- 配置hibernate4 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<value>cn.wxn.demo.cms_core.entity</value>
		</property>
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />
	</bean>
	
	<!-- 配置事务管理 -->
	<bean id="txManager" 
			class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />		
	</bean>
	
	<!-- 配置AOP, spring是通过AOP来进行事务管理的 -->
	<aop:config>
		<!--  配置pointCut 表示那些方法要加入到事务管理中 -->
		<!-- 以下的事务是声明在DAO中,但是通常都会在Service来处理多个业务对象逻辑的关系,
				注入删除,更新等,  
				就会导致数据不完整, 所以事务不应该在DAO层处理,而是应该在Service层,
				这也就是spring所提供的一个非常方便的地方 -->
		<aop:pointcut expression="execution(* cn.wxn.demo.cms_core.dao.*.*(..))" 
								id="allMethods"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods"/>
	</aop:config>

<!-- 配置那些方法需要加入事务控制 -->	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- 让所有的方法都加入事务管理,为了提高效率,
					可以把一些查询之类的方法设置为只读事务 -->
			<tx:method name="*" propagation="REQUIRED" read-only="true"/>
			<!-- 以下方法都是可能设计修改的方法, 就无法设置为只读 -->
			<tx:method name="add*" propagation="REQUIRED"  />
			<tx:method name="del*" propagation="REQUIRED"  />
			<tx:method name="update*" propagation="REQUIRED"  />
			<tx:method name="save*" propagation="REQUIRED"  />
		</tx:attributes>
	</tx:advice>
	
</beans>